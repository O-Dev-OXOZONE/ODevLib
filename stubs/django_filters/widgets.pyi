from _typeshed import Incomplete
from django import forms

class LinkWidget(forms.Widget):
    choices: Incomplete
    def __init__(self, attrs: Incomplete | None = ..., choices=...) -> None: ...
    data: Incomplete
    def value_from_datadict(self, data, files, name): ...
    def render(self, name, value, attrs: Incomplete | None = ..., choices=..., renderer: Incomplete | None = ...): ...  # type: ignore
    def render_options(self, choices, selected_choices, name): ...
    def render_option(self, name, selected_choices, option_value, option_label): ...
    def option_string(self): ...

class SuffixedMultiWidget(forms.MultiWidget):
    suffixes: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def suffixed(self, name, suffix): ...
    def get_context(self, name, value, attrs): ...
    def value_from_datadict(self, data, files, name): ...
    def value_omitted_from_data(self, data, files, name): ...
    def replace_name(self, output, index): ...
    def decompress(self, value): ...

class RangeWidget(SuffixedMultiWidget):
    template_name: str
    suffixes: Incomplete
    def __init__(self, attrs: Incomplete | None = ...) -> None: ...
    def decompress(self, value): ...

class DateRangeWidget(RangeWidget):
    suffixes: Incomplete

class LookupChoiceWidget(SuffixedMultiWidget):
    suffixes: Incomplete
    def decompress(self, value): ...

class BooleanWidget(forms.Select):
    def __init__(self, attrs: Incomplete | None = ...) -> None: ...
    def render(self, name, value, attrs: Incomplete | None = ..., renderer: Incomplete | None = ...): ...
    def value_from_datadict(self, data, files, name): ...

class BaseCSVWidget(forms.Widget):
    surrogate: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def value_from_datadict(self, data, files, name): ...
    def render(self, name, value, attrs: Incomplete | None = ..., renderer: Incomplete | None = ...): ...

class CSVWidget(BaseCSVWidget, forms.TextInput):
    def __init__(self, *args, attrs: Incomplete | None = ..., **kwargs) -> None: ...

class QueryArrayWidget(BaseCSVWidget, forms.TextInput):
    def value_from_datadict(self, data, files, name): ...
